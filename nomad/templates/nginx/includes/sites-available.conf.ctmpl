{{ define "nginx" }}
  {{ range $namespaceKey, $namespaceValue := . }}

    {{ range $domainKey, $domainValue := $namespaceValue.domains }}
    server {
      server_name {{ $domainKey }};

      listen *:80;
      listen [::]:80;

      # Process plain HTTP request which has been sent to HTTPS port
      error_page 497 https://$host:$server_port$request_uri;

      location / {
        return 301 https://$host$request_uri;
      }
    }

    server {
      server_name {{ $domainKey }};

      listen *:443 ssl http2;
      listen [::]:443 ssl http2;

      ssl_certificate letsencrypt/live/{{ $namespaceKey }}/fullchain.pem;
      ssl_certificate_key letsencrypt/live/{{ $namespaceKey }}/privkey.pem;

      {{ range $pathKey, $pathValue := $domainValue.paths }}
      location {{ $pathKey }} {
        {{ if $pathValue.service }}
          set $upstream {{ (print $pathValue.service.name ".service.consul:" $pathValue.service.port) }};

          proxy_set_header Host {{ $domainKey }};
          {{ if $pathValue.internalTLS }}
            proxy_pass https://$upstream;
          {{ else }}
            proxy_pass http://$upstream;
          {{ end }}
        {{ else if $pathValue.redirect }}
          {{ if $pathValue.redirect.proxied }}
            proxy_set_header Host {{ $domainKey }};
            proxy_pass http://{{ $pathValue.redirect.url }};
          {{ else }}
            return 301 {{ $pathValue.redirect.url }}$request_uri;
          {{ end }}
        {{ end }}
      }
      {{ end }}
    }
    {{ end }}
  {{ end }}
{{ end }}

{{ with secret "secret/oinkserver/proxy" }}
{{ $namespaces := .Data.data }}
{{ executeTemplate "nginx" $namespaces }}
{{ end }}
