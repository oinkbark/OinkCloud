#############
### PROXY ###
#############

proxy_http_version 1.1;
# https://www.nginx.com/blog/nginx-caching-guide/
proxy_cache_bypass $http_upgrade;
# Set request IP to client IP instead of the load balancer's
# https://docs.nginx.com/nginx/admin-guide/load-balancer/using-proxy-protocol/
# Corrects logging
proxy_set_header X-Real-IP $remote_addr; 
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
# Convert server connection into a websocket
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";
# Avoid 302 redirection
#proxy_set_header Host $host;
# Prevents replay attacks when using early data SSL
# http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data
proxy_set_header Early-Data $ssl_early_data;
proxy_redirect off;
proxy_buffering off;


###########
### SSL ###
###########

# Enable authenticated origin pulls
# Verifies client with trusted certificate listed in ssl-paths.conf
ssl_verify_client on;
# SSLv3 less secure than TLS; TLS 1.3 most modern
# Ciphers in Openssl >=1.1.1 are already secure; no need to list them out
ssl_protocols TLSv1.3;
ssl_prefer_server_ciphers off;
## Enable session resumption to improve https performance
## 1 MB of it can store information for about 40000 sessions
ssl_session_timeout 1d;
ssl_session_tickets off;
ssl_session_cache shared:SSL:20m;
## OCSP Stapling
## Fetch OCSP records from URL in ssl_certificate and cache them
ssl_stapling on;
ssl_stapling_verify on;
# Speeds up resumed connections over TLS 1.3
# Must be used with Earl-Data header to avoid replay attacks
ssl_early_data on;
# Public key pinning
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning


## SSL keys
# If used without Cloudflare, encrypts traffic between server and visitor (Regular SSL certificate)
# If used with Cloudflare, encrypts traffic between Cloudflare and server (Origin CA certificate)
# (Cloudflare uses their own additional SSL tunnel between them and visitor)
# https://blog.cloudflare.com/cloudflare-ca-encryption-origin/
# Located in sites-available.conf server blocks

## Authenticated origin pull certificate (Cloudflare)
# Helps Cloudflare verify your server and you verify data requests are coming from Cloudflare
# https://support.cloudflare.com/hc/en-us/articles/204899617
# https://blog.cloudflare.com/protecting-the-origin-with-tls-authenticated-origin-pulls
# ORIGIN CA ROOT IS DIFFERENT FROM ORIGIN PULL
ssl_client_certificate includes/cloudflare-origin-pull.pem;

# Diffie-Hellman key exchange
# Recommended 2048 or 4096 bits
# Harder to decipher traffic even if private key is compromised
# Generate with: openssl dhparam -out /root/keys/letsencrypt/ssl-dhparam.pem 4096
ssl_dhparam includes/ssl-dhparam.pem;


###############
### HEADERS ###
###############

# always = be added regardless of the http code

# Do not send the NGINX version number in error pages or the "server" header
server_tokens off;
log_not_found off;

proxy_set_header Early-Data $ssl_early_data;

# Do not allow browser to render page inside a frame or iframe
# Avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
add_header X-Frame-Options "SAMEORIGIN" always;
# XSS filter; Usually on by default anyway (Block mode: do not show page if detected to be XSS attack)
add_header X-XSS-Protection "1; mode=block" always;
# Security: MIME Types; Do not override content type.
add_header X-Content-Type-Options "nosniff" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;


# HSTS (HTTP Strict Transport Security), RFC 6797: Domain must only be accessed using HTTPS (SSL or TLS).
# https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
# HTTP should immediately redirect to HTTPS before adding the www subdomain
## Max Age: How long browser caches policy for (31,536,000 seconds, equal to 1 year)
## Preload: https://hstspreload.org List of web domains and subdomains that always use HSTS. 
### This domain list is distributed and hardcoded into major web browsers, and hard to be taken off of.
#### add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;


###################
### PERFORMANCE ###
###################

# Compression Enabling
gzip on;
# Enable runtime decompression for clients that do  not support compression
gunzip on;
# Attempts to send file.gz instead of regualr file
gzip_vary on;
# In bytes
gzip_min_length 20;
# Only compress if response will not be cached
gzip_proxied    no-cache no-store private expired auth;
gzip_comp_level 6;
gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

types_hash_max_size 2048;
client_max_body_size 16M;
default_type application/octet-stream;
# Thread pools for read and write
# https://www.nginx.com/blog/thread-pools-boost-performance-9x/
aio threads;
aio_write on;
# Speed up static file delivery (reduces network overhead and speeds the way files are sent)
# Issue with SSL cert updating?
sendfile on;
# Reduce the maximum time spent in blocking sendfile()
sendfile_max_chunk 512k;
# Combined with sendfile, tcp_nopush ensures that the packets are full before being sent to the client
tcp_nopush on;
# Forces the socket to send full packet data immediately
tcp_nodelay on;


###############
### Logging ###
###############

#open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;

# Make logging structured (JSON format)
# Todo: Look at compression option
# $proxy_protocol_addr instead of $remote_addr
# req_full = method, route, http version
# Must be defined before it can be referenced
log_format json_combined escape=json
'{'
  '"req_utc": "$time_local",'
  '"req_ip": "$remote_addr",'
  '"req_agent": "$http_user_agent",'
  '"req_method": "$request_method",'
  '"req_full": "$request",'
  '"req_referer": "$http_referer",'
  '"res_status": "$status",'
  '"res_bytes": "$body_bytes_sent"'
'}';

access_log /var/log/nginx/access.log json_combined;
## Live error logs; warn log level [ info, notice, warn, error, crit, alert, or emerg ]
error_log /var/log/nginx/error.log warn;


##################
### IP LOGGING ###
##################

## Add trusted Cloudflare IP's that transmit user IP's
## Last update to Cloudflare list: October 2020
## https://www.cloudflare.com/ips/
## RealIP Module is already built into the Docker Image (see NGINX Dockerfile)

# IPV4 Addresses
set_real_ip_from 173.245.48.0/20;
set_real_ip_from 103.21.244.0/22;
set_real_ip_from 103.22.200.0/22;
set_real_ip_from 103.31.4.0/22;
set_real_ip_from 141.101.64.0/18;
set_real_ip_from 108.162.192.0/18;
set_real_ip_from 190.93.240.0/20;
set_real_ip_from 188.114.96.0/20;
set_real_ip_from 197.234.240.0/22;
set_real_ip_from 198.41.128.0/17;
set_real_ip_from 162.158.0.0/15;
set_real_ip_from 104.16.0.0/12;
set_real_ip_from 172.64.0.0/13;
set_real_ip_from 131.0.72.0/22;

# IPV6 Addresses
set_real_ip_from 2400:cb00::/32;
set_real_ip_from 2606:4700::/32;
set_real_ip_from 2803:f800::/32;
set_real_ip_from 2405:b500::/32;
set_real_ip_from 2405:8100::/32;
set_real_ip_from 2a06:98c0::/29;
set_real_ip_from 2c0f:f248::/32;

# Set actual IP header
real_ip_header X-Forwarded-For;
