{{ define "nginx-http" }}
  {{ range $namespaceKey, $namespaceValue := .http }}

    {{ range $domainKey, $domainValue := $namespaceValue.domains }}
      server {
        server_name {{ $domainKey }};

        listen *:80;
        listen [::]:80;

        # Process plain HTTP request which has been sent to HTTPS port
        error_page 497 https://$host:$server_port$request_uri;

        location / {
          return 301 https://$host$request_uri;
        }
      }

      server {
        server_name {{ $domainKey }};

        listen *:443 ssl http2;
        listen [::]:443 ssl http2;

        {{ $tlsName := $namespaceKey }}
        
        {{ if $domainValue.dedicatedTLS }}
          {{ $tlsName = $domainKey }}
          ssl_stapling off;
          ssl_stapling_verify off;
        {{ end }}

        {{ if $domainValue.direct }}
          ssl_verify_client off;
          ssl_client_certificate includes/certs/ca-bundle.pem;
        {{ end }}

        ssl_certificate letsencrypt/live/{{ $tlsName }}/fullchain.pem;
        ssl_certificate_key letsencrypt/live/{{ $tlsName }}/privkey.pem;
        ssl_trusted_certificate letsencrypt/live/{{ $tlsName }}/chain.pem;

        {{ range $pathKey, $pathValue := $domainValue.paths }}
        location {{ $pathKey }} {
          {{ if $pathValue.service }}
            {{ with service (print $pathValue.service.name) }}
            {{ with index . 0 }}
            set $upstream {{ (print .NodeAddress ":" .Port) }};
            {{ end }}
            {{ end }}

            proxy_set_header Host {{ $domainKey }};
            {{ if $pathValue.protocol }}
              proxy_pass {{ (print $pathValue.protocol) }}://$upstream;
            {{ else }}
              proxy_pass http://$upstream;
            {{ end }}
          {{ else if $pathValue.redirect }}
            {{ if $pathValue.redirect.proxied }}
              proxy_set_header Host {{ $domainKey }};
              proxy_pass http://{{ $pathValue.redirect.url }};
            {{ else }}
              return 301 {{ $pathValue.redirect.url }}$request_uri;
            {{ end }}
          {{ else if $pathValue.teapot }}
            return 204;
          {{ end }}
        }
      {{ end }}
    }
    {{ end }}
  {{ end }}
{{ end }}

{{ with secret "secret/oinkserver/proxy" }}
{{ $namespaces := .Data.data }}
{{ executeTemplate "nginx-http" $namespaces }}
{{ end }}
